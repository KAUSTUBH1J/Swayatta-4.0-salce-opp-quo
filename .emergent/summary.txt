<analysis>
The AI engineer has significantly advanced the Sawayatta ERP. Starting with consolidating backend components for Lead Management, the engineer established robust frontend features like the multi-stage  and  with KPIs, and a sophisticated . The focus then shifted to the comprehensive Opportunity Management Module, with initial backend models and APIs, followed by frontend implementation of the  and  pages. Critical bugs were addressed, including fixing data display for opportunities and resolving lead creation issues by implementing missing authorization headers and removing a problematic checklist. The most recent major work involved redesigning the Opportunity stage progression from a simple dropdown to a detailed multi-stage stepper with specific field requirements for each L1-L8 stage, along with implementing the crucial lead-to-opportunity conversion logic in the backend. The system now successfully converts leads into opportunities, setting their initial stage to L1 with an auto-generated OPP-ID.
</analysis>

<product_requirements>
The Sawayatta ERP manages business operations, focusing on Lead and Opportunity Management.

**Lead Management Module**:
*   A multi-stage form (General Info, Lead Details, Proofs & Checklist) with tender logic, validations, nurture/conversion logic.
*   Lead Listing page with KPIs (total, pending, approved, escalated), filters, search, and full CRUD.
*   A Lead Change Status modal for approving, rejecting, or converting leads to opportunities, with the Convert to Opportunity option appearing post-approval.
*    field in Lead form, conditionally displayed for Tender or Pre-Tender types.
*   *Update*: The lead creation process was initially blocked; it required fixing missing authorization headers and removing a mandatory checklist. Lead-to-Opportunity conversion was a pending functionality, requiring proper OPP-ID generation and L1 stage setup.

**Opportunity Management Module**:
*   Supports an L1→L8 pipeline, multi-quotation flow, rate-card pricing, P&L, multi-phase quotations (phases→groups→items), KPIs, RBAC, and audit logs.
*   Listing page with KPIs (Total Opportunity, Open, Pipeline value, Weighted Revenue, Win Rate (%)) and weighted revenue.
*   Quotation system with profitability percentage.
*   Integration with existing Lead Management.
*   *Update*: Opportunity creation is exclusively through Lead conversion; manual creation is disallowed. The L1-L8 stages must be implemented as a multi-stage stepper with detailed, validated fields for each stage, including read-only locks after L4 and after Won/Lost stages. Quotations can only be added in the L4 stage (Proposal), allowing multiple quotations but with a single selection for progression.
</product_requirements>

<key_technical_concepts>
-   **Full-Stack**: React.js (Frontend), FastAPI (Backend), MongoDB (Database).
-   **Authentication/Authorization**: JWT, bcrypt, Role-Based Access Control (RBAC).
-   **UI/Forms**: Shadcn UI, Tailwind CSS, ,  for validation.
-   **API Communication**: .
-   **Environment**: Kubernetes, backend                          RUNNING   pid 27, uptime 0:00:04
code-server                      RUNNING   pid 29, uptime 0:00:04
frontend                         STOPPING  
mongodb                          RUNNING   pid 33, uptime 0:00:04
supervisor> .
-   **Data Handling**: Pydantic models, UUIDs for IDs (no Mongo ObjectIDs), .
</key_technical_concepts>

<code_architecture>

-   :
    *   **Importance**: Core FastAPI application.
    *   **Changes**: Added/updated Pydantic models for Opportunity (including stage-specific data like ), , . Implemented CRUD APIs for Opportunity masters and core Opportunity, including a  and  endpoints. Fixed  to correctly create an Opportunity and store  in Lead. Removed checklist validation for Leads. Initialized master data for new Opportunity-related models. RBAC setup for Opportunities menu confirmed.
-   :
    *   **Importance**: Manages global routing.
    *   **Changes**: Added routes for , , , and . Removed  routes.
-   :
    *   **Importance**: Multi-stage form for leads.
    *   **Changes**: Fixed API calls to include  headers. Removed all checklist-related logic, state, and validation. Ensured  conditional display.
-   :
    *   **Importance**: Displays lead data.
    *   **Changes**: Minor adjustments to integrate .
-   :
    *   **Importance**: Manages lead status changes.
    *   **Changes**: Created from scratch, enables lead conversion to opportunity.
-   :
    *   **Importance**: Reusable RBAC-controlled data table.
    *   **Changes**: Modified to accept  prop for custom buttons.
-   :
    *   **Importance**: Displays opportunity data and KPIs.
    *   **Changes**: Created from scratch. Implemented KPI dashboard. Fixed data display issue (fetching  instead of ). Removed Create Opportunity button and added a message about lead conversion.
-   :
    *   **Importance**: Displays detailed opportunity information.
    *   **Changes**: Created from scratch. Displays stage ribbon, summary panel, tabbed interface. Integrated  to handle stage progression. Enforces L4 stage restriction for quotation creation.
-   :
    *   **Importance**: Component for building quotations.
    *   **Changes**: Created from scratch. Initial structure for handling quotation creation.
-   :
    *   **Importance**: New component to manage opportunity stage progression.
    *   **Changes**: Created from scratch to implement the multi-stage stepper with stage-specific forms and validations. Replaced previous  component.
-   : Documents  integration.
</code_architecture>

<pending_tasks>
-   Complete the detailed implementation of all stage-specific forms within  as per the requirements in Chat Message 190.
-   Implement the full Quotation System Builder () with phases, groups, items, live totals, and profitability display.
-   Implement audit logging for create/update/delete/approve for opportunities and quotations.
-   Refine RBAC on UI and APIs for the new module as development progresses.
</pending_tasks>

<current_work>
The AI engineer has just completed fixing a critical bug where leads were not being converted into opportunities upon status change. This involved uncommenting the opportunity creation logic in the  backend function in  and adding an  field to the  model for reference.

Specifically, in , the code now correctly creates an  object from lead data, assigns an initial L1 - Prospect stage, generates a unique OPP-ID, and saves this new opportunity to the database. The  is linked to the newly created opportunity, and the lead itself is updated to store the generated . This work was followed by comprehensive backend and frontend testing, confirming the lead-to-opportunity conversion workflow is fully functional.
</current_work>

<optional_next_step>
Proceed with the detailed implementation of the multi-stage stepper in  for L1-L8 stages, including all specified fields and validations.
</optional_next_step>
